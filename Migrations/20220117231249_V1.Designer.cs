// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace AJMO.Migrations
{
    [DbContext(typeof(FakultetContext))]
    [Migration("20220117231249_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnketaPitanja", b =>
                {
                    b.Property<int>("AnketaPitanjaID")
                        .HasColumnType("int");

                    b.Property<int>("PitanjaAnketaID")
                        .HasColumnType("int");

                    b.HasKey("AnketaPitanjaID", "PitanjaAnketaID");

                    b.HasIndex("PitanjaAnketaID");

                    b.ToTable("AnketaPitanja");
                });

            modelBuilder.Entity("Models.Anketa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProfesorID")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ZurkaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProfesorID");

                    b.HasIndex("ZurkaID");

                    b.ToTable("Anketa");
                });

            modelBuilder.Entity("Models.Pitanja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ListaPitanja")
                        .IsRequired()
                        .HasMaxLength(666)
                        .HasColumnType("nvarchar(666)");

                    b.HasKey("ID");

                    b.ToTable("Pitanja");
                });

            modelBuilder.Entity("Models.Popunjavanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnketaID")
                        .HasColumnType("int");

                    b.Property<bool>("Popunio")
                        .HasColumnType("bit");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AnketaID");

                    b.HasIndex("StudentID");

                    b.ToTable("Popunjavanje");
                });

            modelBuilder.Entity("Models.Profesor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Komentari")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProceneOcene")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Indeks")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Models.Zurka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lokacija")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sati")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Zanrovi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Zurka");
                });

            modelBuilder.Entity("AnketaPitanja", b =>
                {
                    b.HasOne("Models.Pitanja", null)
                        .WithMany()
                        .HasForeignKey("AnketaPitanjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Anketa", null)
                        .WithMany()
                        .HasForeignKey("PitanjaAnketaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Anketa", b =>
                {
                    b.HasOne("Models.Profesor", "Profesor")
                        .WithMany("ProfesorAnketa")
                        .HasForeignKey("ProfesorID");

                    b.HasOne("Models.Zurka", "Zurka")
                        .WithMany("ZurkaAnketa")
                        .HasForeignKey("ZurkaID");

                    b.Navigation("Profesor");

                    b.Navigation("Zurka");
                });

            modelBuilder.Entity("Models.Popunjavanje", b =>
                {
                    b.HasOne("Models.Anketa", "Anketa")
                        .WithMany("AnketaStudent")
                        .HasForeignKey("AnketaID");

                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentAnketa")
                        .HasForeignKey("StudentID");

                    b.Navigation("Anketa");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Anketa", b =>
                {
                    b.Navigation("AnketaStudent");
                });

            modelBuilder.Entity("Models.Profesor", b =>
                {
                    b.Navigation("ProfesorAnketa");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Navigation("StudentAnketa");
                });

            modelBuilder.Entity("Models.Zurka", b =>
                {
                    b.Navigation("ZurkaAnketa");
                });
#pragma warning restore 612, 618
        }
    }
}
